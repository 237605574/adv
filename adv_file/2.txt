0 1 1 1 0
0 1 0 0 0
0 1 0 1 0
0 1 0 1 0
0 0 0 1 0


0 1 0 0 0 
0 1 0 1 0
0 0 0 0 0 
0 1 1 1 0
0 0 0 1 0

1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1

0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0

000000000000000 
0000000x0000000 
00s0000x0000e00 
0000000x0000000 
000000000000000


一、解三角形
1.正弦定理
2.余弦定理

二、数列
1.等差数列
2.等差数列求和
3.等比数列1
4.等比数列2
5.等比数列求和
6.数列的递推公式

三、不等式
1.均值不等式
2.不等式的实际应用


FUAIOO
OOIHLJ
EMVJFI
MCPFYF
ACCNOU
ZAGEWC

8 7
10 10
8 9
4 2
9 2
8 3
6 4
9 9
5 7
1 2
5


0 -0.125 0.25 1.125
-0.3 0 -0.1 1.9
-0.25 0.1 0 3.6



0 -5 3 2
2.5 0 0.5 -2
0.4 0.2 0 2.2


-1 0.5 0 0 0.5
0.5 -1 0.5 0 0
0 0.5 -1 0.5 0.5
0 0 0.25 -1 0
各位~我们的公邮是：sysu2016GXBJeast@163.com，密码是：gaoxiaobaojian
老师说课件下周再上传~


华为帐号:Wing1126

3
1 1 1
0 4 -1
2 -2 -1

3 3 -1

4
4 2 1 5
8 7 2 10
4 8 3 6
12 6 11 20



3
2 8 2 
1 6 -1
2 -1 2

14 13 5

4
4 2 1 5
8 7 2 10
4 8 3 6
12 6 11 20

5
2 1 0 0 0
1 2 1 0 0


20
3 69
7 49
9 57
10 33
12 67
16 35
23 9
27 29
30 72
40 12
40 65
44 78
60 33
73 58
79 21
79 49
87 3
92 42
97 26
99 78


0 1 2 1 0
0 0 1 2 1
0 0 0 1 2
-4.45545  1.91089   -4.36634  1.82178   -4.27723  1.73267   -4.18812  1.64356
-4.09901  1.55446   -4.0099   1.46535   -3.92079  1.37624   -3.83168  1.28713
-3.74257  1.19802   -3.65347  1.10891   -3.56436  1.0198    -3.47525  0.930693
-3.38614  0.841584  -3.29703  0.752475  -3.20792  0.663366  -3.11881  0.574257
-3.0297   0.485149  -2.94059  0.39604   -2.85149  0.306931  -2.76238  0.217822
-2.67327  0.128713  -2.58416  0.039604  -2.49505  -0.049505 -2.40594  -0.138614
-2.31683  -0.227723 -2.22772  -0.316832 -2.13861  -0.405941 -2.0495   -0.49505
-1.9604   -0.584158 -1.87129  -0.673267 -1.78218  -0.762376 -1.69307  -0.851485
-1.60396  -0.940594 -1.51485  -1.0297   -1.42574  -1.11881  -1.33663  -1.20792
-1.24752  -1.29703  -1.15842  -1.38614  -1.06931  -1.47525  -0.980198 -1.56436
-0.891089 -1.65347  -0.80198  -1.74257  -0.712871 -1.83168  -0.623762 -1.92079
-0.534653 -2.0099   -0.445545 -2.09901  -0.356436 -2.18812  -0.267327 -2.27723
-0.178218 -2.36634  -0.0891089-2.45545

 sudoku([_, 6, _, 5, 9, 3, _, _, _,9, _, 1, _, _, _, 5, _, _,_, 3, _, 4, _, _, _, 9, _,1, _, 8, _, 2, _, _, _, 4,4, _, _, 3, _, 9, _, _, 1,2, _, _, _, 1, _, 6, _, 9,_, 8, _, _, _, 6, _, 2, _,_, _, 4, _, _, _, 8, _, 7,_, _, _, 7, 8, 5, _, 1, _],Solution).

sudoku([_, _, 2, 3, _, _, _, _,_, _, _, _,3, 4, _, _], Solution).


3
2 -1 0
-1 2 -1
0 -1 2
1 1 1

3
2 4 6
3 9 15
4 16 36
1 1 1

3
2 0 0
2 3 2
1 2 3



4
1.6-1 0 0
-1 1.6 -1 0
0 -1 1.6 -1
0 0 -1 1.6
1 1 1 1

(at P1 L8)
  (at P2 L7)
  (at P3 L6)
  (at P4 L5)
  (at P5 L4)
  (at P6 L3)
  (at P7 L2)
  (at P8 L1)



7 0 0 0 0 0 0 0 0
1 6 0 9 0 0 7 0 4
0 8 0 7 0 0 0 0 0
0 0 5 0 0 9 0 3 0
0 0 0 0 0 0 0 2 0
0 1 9 0 8 0 5 0 0
0 0 0 0 0 0 2 0 1
5 3 0 1 0 0 9 0 0
0 0 0 0 0 0 0 8 0

3
0.7321 1 0
1 2.7321 1
0 1 3.7321
1 1 1

0 0 0 0 0 0 0 0 0
0 0 1 0 0 6 4 0 0
9 0 0 0 3 0 0 0 0
0 0 0 1 0 0 8 0 0
7 8 0 5 0 0 0 0 0
3 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 6 3
0 0 0 0 0 0 0 7 0
0 0 2 8 0 9 0 0 0

0 0 0 0 0 2 0 0 8
6 0 3 0 1 0 0 0 0
0 0 8 0 0 3 0 0 5
8 6 0 9 2 0 0 5 3
4 0 0 3 0 0 0 1 0
5 0 0 0 8 0 0 4 0
0 4 0 0 0 7 2 0 0
0 2 0 0 0 9 0 0 0
0 0 0 2 0 0 5 3 0


from pomegranate import *
# The guests initial door selection is completely random
guest = DiscreteDistribution( { 'A': 1./3, 'B': 1./3, 'C': 1./3 } )
# The door the prize is behind is also completely random
prize = DiscreteDistribution( { 'A': 1./3, 'B': 1./3, 'C': 1./3 } )
# Monty is dependent on both the guest and the prize.
monty = ConditionalProbabilityTable(
[[ 'A', 'A', 'A', 0.0 ],
[ 'A', 'A', 'B', 0.5 ],
[ 'A', 'A', 'C', 0.5 ],
[ 'A', 'B', 'A', 0.0 ],
[ 'A', 'B', 'B', 0.0 ],
[ 'A', 'B', 'C', 1.0 ],
[ 'A', 'C', 'A', 0.0 ],
[ 'A', 'C', 'B', 1.0 ],
[ 'A', 'C', 'C', 0.0 ],
[ 'B', 'A', 'A', 0.0 ],
[ 'B', 'A', 'B', 0.0 ],
[ 'B', 'A', 'C', 1.0 ],
[ 'B', 'B', 'A', 0.5 ],
[ 'B', 'B', 'B', 0.0 ],
[ 'B', 'B', 'C', 0.5 ],
[ 'B', 'C', 'A', 1.0 ],
[ 'B', 'C', 'B', 0.0 ],
[ 'B', 'C', 'C', 0.0 ],
[ 'C', 'A', 'A', 0.0 ],
[ 'C', 'A', 'B', 1.0 ],
[ 'C', 'A', 'C', 0.0 ],
[ 'C', 'B', 'A', 1.0 ],
[ 'C', 'B', 'B', 0.0 ],
[ 'C', 'B', 'C', 0.0 ],
[ 'C', 'C', 'A', 0.5 ],
[ 'C', 'C', 'B', 0.5 ],
[ 'C', 'C', 'C', 0.0 ]], [guest, prize] )
# State objects hold both the distribution, and a high level name.
s1 = State( guest, name="guest" )
s2 = State( prize, name="prize" )
s3 = State( monty, name="monty" )
# Create the Bayesian network object with a useful name
model = BayesianNetwork( "Monty Hall Problem" )
# Add the three states to the network
model.add_states(s1, s2, s3)
# Add transitions which represent conditional dependencies, where the second node is conditionally dependent on the first node (Monty is dependent on both guest and prize)
model.add_transition(s1, s3)
model.add_transition(s2, s3)
model.bake()

print model.probability(['', '', 'T','',''])
print model.probability(['B', 'B', 'B'])
print
print model.log_probability(['C', 'A', 'B'])
print model.log_probability(['B', 'A', 'A'])




redistribute rip metric-type 1 metric 20 subnets

```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````           	cc    
--高校保健
喜欢的歌：
	舟呗组曲	
	渔夫的歌

合理膳食(必考)
1               0.4583333333
2               0.4196428571
3               0.4118686869
4               0.4090888278
5               0.4077909234
6               0.4070828009
7               0.4066547543
8               0.4063764994
9               0.4061855288

kaggle:
dm14348090	
sowhat1126


8 
8
1 1 1 1 1 1 1 1
1 0 0 1 1 1 1 1
1 0 0 0 1 0 0 1
1 0 1 0 0 0 0 1
1 0 0 0 1 0 0 1
1 1 0 0 0 0 0 1
1 1 0 0 1 1 1 1
1 1 1 1 1 1 1 1
3
3 4
4 5
5 5
2 3
4 3
5 3
2 5

5
5
1 1 1 1 1
1 0 0 0 1 
1 0 0 0 1
1 0 0 0 1
1 1 1 1 1
1
1 2
1 1
2 2 
1 1

insert into mysql.user(Host,User,Password) values("localhost","user",password("123456"));
grant select,insert,update,delete,create,drop on test to user@localhost identified by '123456';

网易邮箱：
q237605574@163.com
sowhat
道客巴巴
lrz1126
sowhat


网易邮箱：
m15521169358@qq.com
sowhat


